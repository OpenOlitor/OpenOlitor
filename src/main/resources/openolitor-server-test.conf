spray.can.server {
  request-timeout = 1s,
  
  # The time period within which a connection handler must have been
  # registered after the bind handler has received a `Connected` event.
  # Set to `infinite` to disable.
  registration-timeout = 1s  
}

openolitor {
	run-proxy-service: true,
	mandanten: ["m1"],
	m1: {
		name: "mandant1",
		
		# Project specific akka persistence configuration
		akka-persistence-sql-async {
		  user = "XTmwMrYuBRr2pLIk"
		  password = "pKNnrAImo6rRVuix"
		  url = "jdbc:mysql://10.0.20.18:3306/CF_535BBF03_F6E1_4222_B709_3ACB51678F70"
		}
		
		# Mandant specific db settings
		db: {
			default: {
				url="jdbc:mysql://10.0.20.18:3306/CF_535BBF03_F6E1_4222_B709_3ACB51678F70"
				user="XTmwMrYuBRr2pLIk"
				password="pKNnrAImo6rRVuix"
			}
		}		
	}
	
	# Security configuration
	security {
		second-factor-auth {
			require = true
			send-email = false
		}
		# max 20s delay
		max-request-delay = 20000
	}
}

# Default akka configuration
akka {
	loglevel = "DEBUG",
	stdout-loglevel = "DEBUG",
	loggers = ["akka.event.slf4j.Slf4jLogger"]  	
  	logging-filter = "akka.event.slf4j.Slf4jLoggingFilter",
	persistence {
		journal.plugin = "akka-persistence-sql-async.journal"
		snapshot-store.plugin = "akka-persistence-sql-async.snapshot-store"
	},
	actor {
	  serializers {
	    event-serializer  = "ch.openolitor.core.eventsourcing.EventStoreSerializer"
	  },
	  serialization-bindings {
	    "ch.openolitor.core.domain.PersistentEvent" = event-serializer
	  }
    }
}	

# Default akka-persistence configuration
akka-persistence-sql-async {
  journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
  snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"

  max-pool-size = 4
  wait-queue-capacity = 10000

  metadata-table-name = "persistence_metadata"
  journal-table-name = "persistence_journal"
  snapshot-table-name = "persistence_snapshot"
}

# JDBC settings
db.default.driver="org.mariadb.jdbc.Driver"
# Connection Pool settings
db.default.poolInitialSize=3
db.default.poolMaxSize=5
db.default.poolConnectionTimeoutMillis=1000
db.default.url="jdbc:mysql://10.0.20.18:3306/CF_535BBF03_F6E1_4222_B709_3ACB51678F70"

# Global settings
scalikejdbc.global.loggingSQLAndTime.enabled=true
scalikejdbc.global.loggingSQLAndTime.logLevel=trace
scalikejdbc.global.loggingSQLAndTime.warningEnabled=true
scalikejdbc.global.loggingSQLAndTime.warningThresholdMillis=1000
scalikejdbc.global.loggingSQLAndTime.warningLogLevel=warn
scalikejdbc.global.loggingSQLAndTime.singleLineMode=false
scalikejdbc.global.loggingSQLAndTime.printUnprocessedStackTrace=false
scalikejdbc.global.loggingSQLAndTime.stackTraceDepth=10

# DB Seed configuration

db.seed {
	models = [
		ch.openolitor.core.models.PersonId,
		ch.openolitor.stammdaten.models.ProjektId,
		ch.openolitor.stammdaten.models.DepotId,
		ch.openolitor.stammdaten.models.TourId,
		ch.openolitor.stammdaten.models.KundeId,
		ch.openolitor.stammdaten.models.AbotypId,
		ch.openolitor.stammdaten.models.AboId,
		ch.openolitor.stammdaten.models.ProduktId,
		ch.openolitor.stammdaten.models.ProduzentId,
		ch.openolitor.buchhaltung.models.RechnungId]
	
	mappings {
		ch.openolitor.core.models {
			PersonId = 40000			
		}
		ch.openolitor.stammdaten.models {
			ProjektId = 1000
			DepotId = 10000
			TourId = 20000
			KundeId = 30000
			AbotypId = 50000
			ProduktId = 60000
			ProduzentId = 70000
			AboId = 100000
		}
		ch.openolitor.buchhaltung.models {
			RechnungId = 200000
		}
	}
}


AWS_ENDPOINT="http://ds31s3.swisscom.com"
AWS_ACCESS_KEY_ID="5484335407854a4c9dc88e01206fc148/CF_P8_30D01107_8388_4628_90FA_BDF06D4B2484"
AWS_SECRET_ACCESS_KEY="eek05SKgALpQQg20ASrCzm1ZF7o"