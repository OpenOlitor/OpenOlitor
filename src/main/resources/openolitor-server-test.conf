include "application"

spray.can.server {
  request-timeout = 1s,
  
  # The time period within which a connection handler must have been
  # registered after the bind handler has received a `Connected` event.
  # Set to `infinite` to disable.
  registration-timeout = 1s  
}

openolitor {
  run-proxy-service: true,
  mandanten: ["m1"],
  m1: {
    name: "mandant1",   
    
    # Project specific akka persistence configuration
    akka-persistence-sql-async {
      url="jdbc:mysql://"${?VCAP_SERVICES.mariadb-object.0.credentials.host}":"${?VCAP_SERVICES.mariadb-object.0.credentials.port}"/"${?VCAP_SERVICES.mariadb-object.0.credentials.database}
      user=${?VCAP_SERVICES.mariadb-object.0.credentials.username}
      password=${?VCAP_SERVICES.mariadb-object.0.credentials.password}
    }
    
    # Mandant specific db settings
    db: {
      default: {
        url="jdbc:mysql://"${?VCAP_SERVICES.mariadb-object.0.credentials.host}":"${?VCAP_SERVICES.mariadb-object.0.credentials.port}"/"${?VCAP_SERVICES.mariadb-object.0.credentials.database}
        user=${?VCAP_SERVICES.mariadb-object.0.credentials.username}
        password=${?VCAP_SERVICES.mariadb-object.0.credentials.password}
      }
    }
    
    s3 {
      aws-endpoint="http://ds31s3.swisscom.com"
      aws-access-key-id="5484335407854a4c9dc88e01206fc148/CF_P8_30D01107_8388_4628_90FA_BDF06D4B2484"
      aws-secret-acccess-key="eek05SKgALpQQg20ASrCzm1ZF7o"
    }
  },
  
  # DB Seed configuration
  db.default.seed {
    models = [
      ch.openolitor.core.models.PersonId,
      ch.openolitor.stammdaten.models.ProjektId,
      ch.openolitor.stammdaten.models.DepotId,
      ch.openolitor.stammdaten.models.TourId,
      ch.openolitor.stammdaten.models.KundeId,    
      ch.openolitor.stammdaten.models.AbotypId,
      ch.openolitor.stammdaten.models.AboId,
      ch.openolitor.stammdaten.models.ProduktId,
      ch.openolitor.stammdaten.models.ProduzentId,
      ch.openolitor.stammdaten.models.VertriebId,
      ch.openolitor.buchhaltung.models.RechnungId]
    
    mappings {
      ch.openolitor.core.models {
        PersonId = 40000      
      }
      ch.openolitor.stammdaten.models {
        ProjektId = 1000
        DepotId = 10000
        TourId = 20000
        KundeId = 30000
        AbotypId = 50000
        ProduktId = 60000
        ProduzentId = 70000
        AboId = 100000
        VertriebId = 110000
      }
      ch.openolitor.buchhaltung.models {
        RechnungId = 200000
      }
    }
  }
  
  # Security configuration
  security {
    second-factor-auth {
      require = false
      send-email = false
    }
    # max 20s delay
    max-request-delay = 20000
    
    cors {
      allow-origin = ["http://wwwtest.openolitor.ch"]
    }
  }
}

# Default akka configuration
akka {
  loglevel = "DEBUG",
  stdout-loglevel = "DEBUG",
  loggers = ["akka.event.slf4j.Slf4jLogger"]    
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter",
  persistence {
    journal.plugin = "akka-persistence-sql-async.journal"
    snapshot-store.plugin = "akka-persistence-sql-async.snapshot-store"
  },
  actor {
    serializers {
      event-serializer  = "ch.openolitor.core.eventsourcing.EventStoreSerializer"
    },
    serialization-bindings {
      "ch.openolitor.core.domain.PersistentEvent" = event-serializer
    }
    }
} 

# Default akka-persistence configuration
akka-persistence-sql-async {
  journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
  snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"

  max-pool-size = 4
  wait-queue-capacity = 10000

  metadata-table-name = "persistence_metadata"
  journal-table-name = "persistence_journal"
  snapshot-table-name = "persistence_snapshot"
}
