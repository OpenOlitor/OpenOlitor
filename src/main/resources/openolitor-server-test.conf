include "application"

openolitor {
  run-proxy-service: true,
  port: 8080,
  port: ${?PORT},
  mandanten: ["m1"],
  m1: {
    name: "mandant1",
    port: null,
    webservicePort: null,

    buchhaltung: {
      # Der Prefix hat zusammen mit der Rechnungsnummer (200000) und der Kundennummer(30000) eine maximale Länge von 26 Zeichen
      referenznummer-prefix = ""
      referenznummer-prefix = ${?OO_SERVICES.buchhaltung-object.mandant1.referenznummer-prefix}
      # Die Rechnungsnummer & Kundennummer in der Referenznummer werden mit Nullen bis zu diesen Längen von vorne aufgefüllt
      rechnung-id-length = 6
      kunde-id-length = 5
      # Teilnehmernummer ohne Sonderzeichen [0-9]{9}
      teilnehmernummer = "777777777"
      teilnehmernummer = ${?OO_SERVICES.buchhaltung-object.mandant1.teilnehmernummer}
    }

    # Project specific akka persistence configuration
    akka-persistence-sql-async {
      url = "jdbc:mysql://"${?VCAP_SERVICES.mariadb-object.0.credentials.host}":"${?VCAP_SERVICES.mariadb-object.0.credentials.port}"/"${?VCAP_SERVICES.mariadb-object.0.credentials.database}
      user = ${?VCAP_SERVICES.mariadb-object.0.credentials.username}
      password = ${?VCAP_SERVICES.mariadb-object.0.credentials.password}
    }

    # Mandant specific db settings
    db: {
      default: {
        url = "jdbc:mysql://"${?VCAP_SERVICES.mariadb-object.0.credentials.host}":"${?VCAP_SERVICES.mariadb-object.0.credentials.port}"/"${?VCAP_SERVICES.mariadb-object.0.credentials.database}
        user = ${?VCAP_SERVICES.mariadb-object.0.credentials.username}
        password = ${?VCAP_SERVICES.mariadb-object.0.credentials.password}
      }
    }

    s3 {
      aws-endpoint = "https://"${?VCAP_SERVICES.dynstrg-object.0.credentials.accessHost}
      aws-access-key-id = ${?VCAP_SERVICES.dynstrg-object.0.credentials.accessKey}
      aws-secret-acccess-key = ${?VCAP_SERVICES.dynstrg-object.0.credentials.sharedSecret}
    }

    smtp {
      from = "info@openolitor.ch"
      endpoint = ${?VCAP_SERVICES.sendgrid-object.0.credentials.hostname}
      port = 25
      user = ${?VCAP_SERVICES.sendgrid-object.0.credentials.username}
      password = ${?VCAP_SERVICES.sendgrid-object.0.credentials.password}
      number-of-retries = 5
      number-of-retries = ${?OO_SERVICES.smtp-object.mandant1.number-of-retries}
      send-email = false
      send-email = ${?OO_SERVICES.smtp-object.mandant1.send-email}
    }

    converttopdf {
      endpoint = "http://pdftools.openolitor.ch/convert2pdf"
    }
  },

  # DB Seed configuration
  db.default.seed {
    models = [
      ch.openolitor.core.models.PersonId,
      ch.openolitor.stammdaten.models.ProjektId,
      ch.openolitor.stammdaten.models.DepotId,
      ch.openolitor.stammdaten.models.TourId,
      ch.openolitor.stammdaten.models.KundeId,
      ch.openolitor.stammdaten.models.AbotypId,
      ch.openolitor.stammdaten.models.AboId,
      ch.openolitor.stammdaten.models.ProduktId,
      ch.openolitor.stammdaten.models.ProduzentId,
      ch.openolitor.stammdaten.models.VertriebId,
      ch.openolitor.stammdaten.models.EinladungId,
      ch.openolitor.stammdaten.models.SammelbestellungId,
      ch.openolitor.stammdaten.models.AuslieferungId,
      ch.openolitor.buchhaltung.models.RechnungId,
      ch.openolitor.stammdaten.models.SammelbestellungId,
      ch.openolitor.buchhaltung.models.RechnungId,
      ch.openolitor.buchhaltung.models.RechnungsPositionId]

    mappings {
      ch.openolitor.core.models {
        PersonId = 40000
      }
      ch.openolitor.stammdaten.models {
        ProjektId = 1000
        DepotId = 10000
        TourId = 20000
        KundeId = 30000
        AbotypId = 50000
        ProduktId = 60000
        ProduzentId = 70000
        AboId = 100000
        EinladungId = 120000
        SammelbestellungId = 300000
        VertriebId = 110000
        AuslieferungId = 130000
      }
      ch.openolitor.buchhaltung.models {
        RechnungId = 200000
        RechnungsPositionId = 400000
      }
    }
  }

  # Security configuration
  security {
    second-factor-auth {
      require = false
    }
    # max 600s delay
    max-request-delay = 600000

    cors {
      allow-origin = ["https://wwwtest.openolitor.ch"]
    }
    zugang-base-url = "https://wwwtest.openolitor.ch/#/zugangaktivieren"
    passwort-reset-base-url = "https://wwwtest.openolitor.ch/#/zugangaktivieren"
  }

  startTimeDelationSeconds = 300
}

# Default akka configuration
akka {
  loglevel = "DEBUG",
  stdout-loglevel = "DEBUG",
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter",
  persistence {
    journal.plugin = "akka-persistence-sql-async.journal"
    snapshot-store.plugin = "akka-persistence-sql-async.snapshot-store"
  },
  actor {
    serializers {
      event-serializer = "ch.openolitor.core.eventsourcing.EventStoreSerializer"
    },
    serialization-bindings {
      "ch.openolitor.core.domain.PersistentEvent" = event-serializer
    }
  }
}

# Default akka-persistence configuration
akka-persistence-sql-async {
  journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
  snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"

  max-pool-size = 4
  wait-queue-capacity = 10000

  metadata-table-name = "persistence_metadata"
  journal-table-name = "persistence_journal"
  snapshot-table-name = "persistence_snapshot"
}

# Configure own dispatcher for the reportsystem to control max used ressources
akka.actor.deployment {
  /oo-system/report-system {
    dispatcher = report-dispatcher
  }
}

report-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}
